// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phone         String?
  password      String
  emailVerified Boolean  @default(false)
  role          Role     @default(USER)
  status        String   @default("active")
  isAdmin       Boolean  @default(false)  // Admin flag for token management
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?

  // Profile settings
  country       String?
  timezone      String?  @default("UTC")

  // Security settings
  twoFactorEnabled    Boolean @default(false)
  emailNotifications  Boolean @default(true)
  smsNotifications    Boolean @default(false)
  loginAlerts         Boolean @default(true)

  // Notification settings
  priceAlerts            Boolean @default(true)
  tradeNotifications     Boolean @default(true)
  depositNotifications   Boolean @default(true)
  withdrawalNotifications Boolean @default(true)
  marketingEmails        Boolean @default(false)
  securityAlerts         Boolean @default(true)

  // Referral system
  referrerId    String?  // ID of the user who referred this user

  // Relations
  wallet         Wallet?
  transactions   Transaction[]
  notifications  Notification[]
  createdNotifications Notification[] @relation("NotificationCreator")
  supportTickets SupportTicket[]
  adminLogs      AdminLog[]
  depositRequests DepositRequest[]
  stakings       Staking[]
  sentTransfers     Transfer[] @relation("SentTransfers")
  receivedTransfers Transfer[] @relation("ReceivedTransfers")
  tokenMintings     TokenMinting[]  // Admin token minting operations
  mintHistory       MintHistory[]   // Admin mint history
  supplyTransfers   AdminSupplyTransfer[] @relation("AdminSupplyTransfers")
  
  // Referral relations
  referrer       User?   @relation("UserReferrals", fields: [referrerId], references: [id], onDelete: SetNull)
  referrals      User[]  @relation("UserReferrals")
  sentReferrals  Referral[] @relation("ReferrerReferrals")
  receivedReferrals Referral[] @relation("ReferredReferrals")

  @@map("users")
}

model Wallet {
  id         String   @id @default(cuid())
  userId     String   @unique
  balance    Float    @default(0)        // USD balance
  tikiBalance Float   @default(0)        // TIKI token balance
  currency   String   @default("USD")
  lastUpdated DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  type      TransactionType
  amount    Float
  currency  String            @default("USD")
  status    TransactionStatus @default(PENDING)
  gateway   String?
  description String?         // Optional description
  screenshot String?          // Path to uploaded screenshot
  binanceAddress String?      // Binance address for manual deposits/withdrawals
  network   String?            // Network type for withdrawals (BEP20, TRC20)
  
  // Transaction fee fields
  feeAmount        Float   @default(0)     // Fee amount charged
  feeReceiverId    String? @default("ADMIN_WALLET") // Who receives the fee
  transactionType  String?                 // Additional transaction type info
  netAmount        Float   @default(0)     // Amount after fees (amount - feeAmount)
  
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Notification {
  id        String             @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  isGlobal  Boolean            @default(false)  // For admin notifications to all users
  createdBy String?            // Admin who created the notification
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  creator User? @relation("NotificationCreator", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model SupportTicket {
  id        String           @id @default(cuid())
  userId    String
  subject   String
  messages  Json
  status    TicketStatus     @default(OPEN)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String
  targetId   String
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model Price {
  id        String   @id @default(cuid())
  symbol    String
  price     Float
  volume    Float?
  marketCap Float?
  timestamp DateTime @default(now())
  source    String?

  @@map("prices")
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Fee configuration model for transaction fees
model FeeConfig {
  id                String   @id @default(cuid())
  transactionFeeRate Float    @default(0.05)    // 5% default fee rate
  feeReceiverId      String   @default("ADMIN_WALLET") // Admin wallet ID for fees
  isActive           Boolean  @default(true)     // Enable/disable fee system
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("fee_config")
}

model DepositRequest {
  id              String            @id @default(cuid())
  userId          String
  amount          Float
  screenshot      String            // Path to uploaded screenshot
  binanceAddress String            // Binance address used for deposit
  status          TransactionStatus @default(PENDING)
  adminNotes      String?          // Admin notes for approval/rejection
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposit_requests")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  otpHash   String   @map("hashedOtp")
  used      Boolean  @default(false)
  expiresAt DateTime @map("expiry")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@map("password_resets")
}

model TokenStats {
  id               String   @id @default(cuid())
  totalTokens      Float    @default(100000000) // 100M TIKI tokens
  totalInvestment  Float    @default(350000)     // Initial investment: 350,000 USD
  currentPrice     Float    @default(0.0035)    // Initial price: 0.0035 USD
  lastUpdated      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("token_stats")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  BUY
  SELL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ALERT
}

enum NotificationStatus {
  READ
  UNREAD
}

enum TicketStatus {
  OPEN
  CLOSED
}

model Staking {
  id            String        @id @default(cuid())
  userId        String
  amountStaked  Float
  durationDays  Int
  rewardPercent Float
  startDate     DateTime
  endDate       DateTime
  status        StakingStatus @default(ACTIVE)
  claimed       Boolean       @default(false)
  rewardAmount  Float?        // Calculated reward amount
  profit        Float?        // Actual profit earned from staking
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralEarnings ReferralEarning[]

  @@map("staking")
}

enum StakingStatus {
  ACTIVE
  COMPLETED
  CLAIMED
  CANCELLED
}

model Transfer {
  id              String        @id @default(cuid())
  senderId        String
  recipientId     String
  senderEmail     String
  recipientEmail  String
  amount          Float
  note            String?
  status          TransferStatus @default(COMPLETED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  sender    User @relation("SentTransfers", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation("ReceivedTransfers", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("transfers")
}

enum TransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String   // User who sent the referral
  referredId  String   // User who signed up with the referral
  createdAt   DateTime @default(now())

  // Relations
  referrer    User @relation("ReferrerReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
  referred    User @relation("ReferredReferrals", fields: [referredId], references: [id], onDelete: Cascade)
  earnings    ReferralEarning[]

  @@unique([referrerId, referredId]) // Prevent duplicate referrals
  @@map("referrals")
}

model ReferralEarning {
  id          String   @id @default(cuid())
  referralId  String   // Reference to the referral relationship
  stakingId   String?  // Reference to the staking that generated the earning
  amount      Float    // Amount earned by referrer (10% of staking profit)
  createdAt   DateTime @default(now())

  // Relations
  referral    Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  staking     Staking? @relation(fields: [stakingId], references: [id], onDelete: SetNull)

  @@map("referral_earnings")
}

model TokenSupply {
  id                    Int      @id @default(autoincrement())
  totalSupply           BigInt   @default(10000000)    // 10,000,000 tokens total
  remainingSupply       BigInt   @default(10000000)    // Legacy field (kept for compatibility)
  userSupplyRemaining   BigInt   @default(2000000)     // 20% user-available tokens (2M)
  adminReserve          BigInt   @default(8000000)     // 80% admin-locked tokens (8M)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  tokenMintings         TokenMinting[]
  supplyTransfers       AdminSupplyTransfer[]

  @@map("token_supply")
}

model AdminSupplyTransfer {
  id              String   @id @default(cuid())
  adminId         String   // Admin who performed the transfer
  tokenSupplyId   Int      // TokenSupply record
  amount          BigInt   // Amount transferred from admin reserve to user supply
  fromReserve     BigInt   // Admin reserve before transfer
  toUserSupply    BigInt   // User supply after transfer
  reason          String?  // Optional reason for transfer
  createdAt       DateTime @default(now())

  // Relations
  admin           User @relation("AdminSupplyTransfers", fields: [adminId], references: [id], onDelete: Cascade)
  tokenSupply     TokenSupply @relation(fields: [tokenSupplyId], references: [id], onDelete: Cascade)

  @@map("admin_supply_transfers")
}

model TokenMinting {
  id            String   @id @default(cuid())
  adminId       String   // Admin who performed the minting
  tokenSupplyId Int      // Reference to token supply record
  amount        BigInt   // Amount of tokens minted
  reason        String?  // Reason for minting (optional)
  totalSupply   BigInt   // Total supply after minting
  remainingSupply BigInt // Remaining supply after minting
  createdAt     DateTime @default(now())

  // Relations
  admin         User @relation(fields: [adminId], references: [id], onDelete: Cascade)
  tokenSupply   TokenSupply @relation(fields: [tokenSupplyId], references: [id], onDelete: Cascade)

  @@map("token_minting")
}

model MintHistory {
  id        String   @id @default(cuid())
  adminId   String   // Admin who performed the minting
  amount    BigInt   // Amount of tokens minted
  createdAt DateTime @default(now())

  // Relations
  admin     User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("mint_history")
}

model FeeSettings {
  id        Int      @id @default(autoincrement())
  type      String   @unique // transfer, withdraw, buy, sell
  rate      Float    // Fee rate as decimal (0.05 = 5%)
  isActive  Boolean  @default(true) // Enable/disable this fee type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fee_settings")
}

model DepositAddresses {
  id        Int      @id @default(autoincrement())
  bep20     String?  // BEP20 deposit address
  trc20     String?  // TRC20 deposit address
  updatedAt DateTime @updatedAt

  @@map("deposit_addresses")
}

